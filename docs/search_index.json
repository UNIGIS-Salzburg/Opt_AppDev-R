[["readwrite.html", "Lesson 8 Read and Write Data 8.1 Read and write tabular data 8.2 Read and write vector data 8.3 Read and write raster data 8.4 Data API", " Lesson 8 Read and Write Data In previous exercises we have read data from a CSV file into our script. Similarly we can also write code outputs to file. In this lesson you will learn to read and write plain-text, spatial vector and raster file formats. Moreover, we will retrieve online data by means of a data API. 8.1 Read and write tabular data A series of formats are based on plain-text files. For instance… comma-separated values files .csv semi-colon-separated values files .csv tab-separated values files .tsv other formats using custom delimiters fix-width files .fwf The readr library (also part of Tidyverse) provides a series of functions that can be used to load from and save to such data formats. For instance, the read_csv function reads a comma-delimited CSV file from the path provided as the first argument. The code example below reads a CSV file that contains global fishery statistics provided by the World Bank and queries Norwegian entries. The function write_csv writes these entries to a new CSV file. library(tidyverse) fishery_data &lt;- readr::read_csv(&quot;data/capture-fisheries-vs-aquaculture.csv&quot;) # print(fishery_data) # print(typeof(fishery_data$)) fishery_data %&gt;% dplyr::filter(Entity == &quot;Norway&quot;) %&gt;% readr::write_csv(&quot;data/capture-fisheries-vs-aquaculture-norway.csv&quot;, append=FALSE) %&gt;% dplyr::slice_head(n = 3) %&gt;% knitr::kable() Entity Code Year Aquaculture production (metric tons) Capture fisheries production (metric tons) Norway NOR 1960 1900 1609362 Norway NOR 1961 900 1758413 Norway NOR 1962 200 1572913 In order to run the script, download the CSV file. Then copy and run the code in a new R-script. Other important packages for reading tabular data are readxl for Excel (.xls and .xlsx) and haven for SPSS, Stata and SAS data. 8.2 Read and write vector data The library sf makes it easy to read and write vector datasets such as shapefiles. Remember: In lesson 4, we used the sf library to build vector geometries from scratch. Investigate their properties and assign and transform coordinate reference systems. The name sf stands for simple features, meaning that sf-objects conform to the simple feature standard. Now we use the same library to load sf-objects from file. In order to load vector data in an R-Script, we can use the function st_read(). In the code block below, a shapefile (North Carolina sample data) is loaded and assigned to a variable nc. The next line creates a basic map in sf by means of plot(). By default this creates a multi-panel plot, one sub-plot for each variable (attribute) of the sf-object. library(sf) nc &lt;- sf::st_read(&quot;data/nc.shp&quot;) plot(nc) As you have learned in lesson 4, sf represents features as records in data-frame-like structures with an additional geometry list-column. The example below renders three features (rows) of variable nc including the geometry column of type MULTIPOLYGON (see Simple feature geometry types) as well as the attributes AREA (feature area) and NAME (name of county): nc %&gt;% dplyr::select(AREA, NAME, geometry) %&gt;% dplyr::slice_head(n = 3) %&gt;% knitr::kable() AREA NAME geometry 0.114 Ashe MULTIPOLYGON (((-81.47276 3… 0.061 Alleghany MULTIPOLYGON (((-81.23989 3… 0.143 Surry MULTIPOLYGON (((-80.45634 3… sf also includes a number of operations to manipulate the geometry of features such as st_simplify: sf::st_simplify(nc) %&gt;% plot(., max.plot = 1) You may have recognized that a dot (.) is used as a parameter in the function plot(). The dot represents the piped value. In the example above the dot is used to define the simplified geometry of nc as first parameter of function plot() and max.plot = 1 as the second. In the next example, the st_geometry() retrieves the geometry attribute from variable nc, function st_centroid() calculates the centroid of the polygon geometry (counties) and function st_write writes the centroid point geometry to file. sf::st_geometry(nc) %&gt;% sf::st_centroid() %&gt;% sf::st_write(&quot;data/nc-centroids.shp&quot;, delete_dsn = TRUE) %&gt;% plot(pch = 3, col = &#39;red&#39;) The online book Geocomputation with R offers a more comprehensive explanation of available geometric, attribute and spatial data operations. For a quick overview, you may turn to the sf cheatsheets. In order to test the code on your machine, download the North Carolina dataset and install the libraries sf and Rcpp before you run the code in an R-Script. The plot() function offers a large number of arguments that can be used to customize your map. Replace ‘AREA’ in the map above by a more meaningful map title. Turn to the documentation for more information. See our solution! 8.3 Read and write raster data The terra library provides functions to read and write raster data. In lesson 4, we used the terra library to build SpatRaster Objects from scratch, investigated their properties and assigned and transformed coordinate reference systems. It is more common, however, to create a SpatRaster Object from a file. Supported file formats for reading are GeoTIFF, ESRI, ENVI, and ERDAS. Most formats supported for reading can also be written to (see Creating SpatRaster objects). The following code reads a GeoTIFF (download venice-Sentinel.tiff 712KB) into memory and assigns it to a variable named r: library(terra) r &lt;- terra::rast(&quot;data/venice-Sentinel.tiff&quot;) The function hasValues returns the logic value TRUE, which indicates that in-memory layers have cell values: terra::hasValues(r) ## [1] TRUE Executing the variable name r returns additional metadata information, which among others reveals that the image has 4 layers: r ## class : SpatRaster ## dimensions : 503, 692, 4 (nrow, ncol, nlyr) ## resolution : 7.025638, 6.675899 (x, y) ## extent : 288674.2, 293535.9, 5033073, 5036431 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 33N (EPSG:32633) ## source : venice-Sentinel.tiff ## names : venice-Sentinel_1, venice-Sentinel_2, venice-Sentinel_3, venice-Sentinel_4 Layers 1-3 correspond to color bands red, green, and blue. In order to plot the true color sentinel imagery, we can use terra function plotRGB and assign the numbers of respective color bands to attributes r (red), g (greeb), b (blue): terra::plotRGB(r, r=1, g=2, b=3, main=&quot;Sentinel-2 image of Venice&quot;) The following line converts the original CRS (which is WGS 84 / UTM zone 33N) to the Italian national CRS Italy Zone 1: r_z1 &lt;- terra::project(r, &quot;+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=1500000 +y_0=0 +ellps=intl +units=m +no_defs&quot;) Eventually, the modified SpatRaster Object is written to file by means of terra function writeRaster: terra::writeRaster(r_z1, &quot;data/venice_zone1.tif&quot;, overwrite=TRUE) 8.4 Data API API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other. By means of an API we can read, write, and modify information on the web. The following video briefly introduces the technology behind it. Figure 8.1: Video (3:13 min): REST API concepts and examples. The most important takeaway messages are: With a REST API, web data is accessible through a URL (Client-Server call via HTTP protocol) The HTTP Get Method delivers data (a Response) - i.e. is used to read data, the HTTP Post Method is used to create new REST API resources (write data). URL Parameters are used to filter specific data from a response. Typically, APIs can return data in a number of different formats. JSON is a very popular format for transferring web data. The two primary elements that make up JSON are keys and values. The library httr2 offers functions to programmatically implement API calls in an R script. We will make use of this library to let our R script interact with the APIs offered by OpenWeather Map that contains historical and real-time weather data for retrieval. In the upcoming example we will make a call to the Current Weather API, which is one out of currently 10 free APIs provided by OpenWeather Map. For accessing the data with httr2, we’ll construct a URL composed of a reference to the data source (base), an API key to get access, and parameters to filter the desired data subset (lat and lon). Note: The OpenWeather API requires an API Key to be passed as a parameter in the call. Get your personal Key to implement your own API requests. If your code returns an error 401, this most likely indicates that your key is not activated yet. According to the FAQs, it may take a couple of hours until your key is active. Security Note: In general, when working with APIs, it’s crucial to handle API keys securely. API keys are sensitive tokens that authenticate your requests to an API service. Exposing these keys publicly can lead to unauthorized access and potential misuse. Always keep your API keys confidential. Avoid hardcoding them directly into scripts, especially if the scripts are shared or stored in public repositories. Instead, consider using environment variables or secure vaults to store your API keys. For sharing scripts, you can instruct users to enter their own keys, ensuring that each user’s key remains private. First we will have to create an URL request. The function sprintf() assembles the URL request composed of base URL, key and lat / lon: Note: The sprintf() function in R is used for string formatting. It allows you to combine, format, and interpolate variables into strings in a flexible way. For example, sprintf(\"%s?lat=%s&amp;lon=%s&amp;appid=%s\", base, lat, lon, apiKey) constructs a URL string by inserting the values of base, lat, lon, and apiKey into the placeholders (%s). Each %s is replaced by the corresponding variable’s value in the order they are listed. This function is particularly useful in scenarios where you need to dynamically generate strings or URLs with variable data. library(httr2) # Define the base URL and parameters base &lt;- &quot;https://dataset.api.hub.geosphere.at/v1/timeseries/historical/inca-v1-1h-1km&quot; latlon &lt;- &quot;47.81,13.03&quot; start_date &lt;- &quot;2023-06-01T22:00&quot; end_date &lt;- &quot;2023-06-01T23:00&quot; output_format &lt;- &quot;geojson&quot; parameters &lt;- &quot;T2M&quot; # Construct the full URL with query parameters using sprintf full_url &lt;- sprintf(&quot;%s?parameters=%s&amp;start=%s&amp;end=%s&amp;lat_lon=%s&amp;output_format=%s&quot;, base, parameters, start_date, end_date, latlon, output_format) # Display the constructed URL print(full_url) ## [1] &quot;https://dataset.api.hub.geosphere.at/v1/timeseries/historical/inca-v1-1h-1km?parameters=T2M&amp;start=2023-06-01T22:00&amp;end=2023-06-01T23:00&amp;lat_lon=47.81,13.03&amp;output_format=geojson&quot; As a next step, the URL is passed to the request() function to create a request object, and req_perform() is used to execute the HTTP Get method: # Create the request and perform it req &lt;- httr2::request(full_url) resp &lt;- httr2::req_perform(req) By default, the req_perform() function returns a response object. Printing a response object provides useful information such as the actual URL used (after any redirects), the HTTP status, and the content type. You can extract important parts of the response with various helper functions such as resp_status() and resp_body_json(): # Check the status code of the response httr2::resp_status(resp) ## [1] 200 # View the content structure of the response in JSON str(httr2::resp_body_json(resp)) ## List of 5 ## $ media_type: chr &quot;application/json&quot; ## $ type : chr &quot;FeatureCollection&quot; ## $ version : chr &quot;v1&quot; ## $ timestamps:List of 2 ## ..$ : chr &quot;2023-06-01T22:00+00:00&quot; ## ..$ : chr &quot;2023-06-01T23:00+00:00&quot; ## $ features :List of 1 ## ..$ :List of 3 ## .. ..$ type : chr &quot;Feature&quot; ## .. ..$ geometry :List of 2 ## .. .. ..$ type : chr &quot;Point&quot; ## .. .. ..$ coordinates:List of 2 ## .. .. .. ..$ : num 13 ## .. .. .. ..$ : num 47.8 ## .. ..$ properties:List of 1 ## .. .. ..$ parameters:List of 1 ## .. .. .. ..$ T2M:List of 3 ## .. .. .. .. ..$ name: chr &quot;air temperature&quot; ## .. .. .. .. ..$ unit: chr &quot;degree_Celsius&quot; ## .. .. .. .. ..$ data:List of 2 ## .. .. .. .. .. ..$ : num 16.3 ## .. .. .. .. .. ..$ : num 15.8 The Current Weather API call returned a number of real-time weather variables such as temperature, air pressure or humidity for the location of Salzburg. Current weather data may alternatively be retrieved by City ID or City Name (see the documentation to get an overview of available API parameters). Inspect the response object by means of a function called headers(). What methods are allowed when accessing the Current Weather API? See solution! Only GET and POST methods are allowed. Other APIs allow to update existing REST API resources (PUT method) or to delete a REST API resource (DELETE method). To facilitate subsequent analyses and data visualization, we can convert the content of the return object to a data frame. With httr2, you can directly retrieve the JSON content and convert it to a data frame: library(knitr) # Using resp_body_json to get the JSON content of the response response_content &lt;- httr2::resp_body_json(resp) response_df &lt;- as.data.frame(response_content) # Select columns 1:5 of response data frame # and render data frame as html table response_df %&gt;% dplyr::select(1:5) %&gt;% knitr::kable(., format=&quot;html&quot;) media_type type version timestamps..2023.06.01T22.00.00.00. timestamps..2023.06.01T23.00.00.00. application/json FeatureCollection v1 2023-06-01T22:00+00:00 2023-06-01T23:00+00:00 For purposes of presentation, the returned data frame was shortened to show only columns 1 to 5. The returned values contain a short description of current weather conditions at location E: 13.03, N: 47.81. Copy the code snippets above to a new R-Script and make an API request. Make sure to replace the key in the code example by your own API key! If you need help, please turn to the discussion forum. "]]
